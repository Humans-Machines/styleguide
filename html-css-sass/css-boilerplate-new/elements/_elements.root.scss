/*------------------------------------*\
  #ROOT
\*------------------------------------*/

/**
 * Default definition of custom properties
 */

:root {
    // Add custom properties for size scale
    @include create-custom-properties($size-scale, false, 'size-');

    --container-w: calc(80vw + 2rem);

    @supports (width: min(1rem, 1rem)) {
        --container-w: min(calc(80vw + 2rem), calc(100vw - 2 * var(--body-p-base) * var(--viewport-ratio)));

        @include respond-to(md) {
            --container-w: min(calc(50vw + 20rem), 80rem);
        }
    }

    // Add custom properties for ui definitions
    @include create-custom-properties($ui-props, true);

    // Add custom properties for colors
    @include create-custom-properties($text-colors, false, 'text-');
    @include create-custom-properties($bg-colors, false, 'bg-');

    // Add border radius
    @include create-custom-properties($border-radius, false, 'border-radius-');
    @include create-custom-properties($border-colors, false, 'border-');

    // Add default measure
    @include create-custom-properties($measure, false);


    /* This more precise approach to real viewport ratios looks too harsh
    *
    *
    * // Define a viewport ratio based on mini breakpoints
    * //
    * // Calculating these with Javascript would be more precise
    * // but would also result into a layout-shift and repaint
    * // after JS is parsed and custom property is updated
    * // --viewport-ratio: 1;
    * // @for $i from 5 through 15 {
    * //     @media (min-aspect-ratio: #{\$\i}/10) {
    * //         --viewport-ratio: #{\$i / 10};
    * //     }
    * // }
    *
    * // calculating body paddings based on viewport ratio
    * --body-px: calc(var(--body-p-base) * var(--viewport-ratio));
    * --body-py: calc(var(--body-p-base) / var(--viewport-ratio));
    *
    */
}
