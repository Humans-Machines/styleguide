//*------------------------------------*\
//    #MIXINS
//\*------------------------------------*/

// Global mixins available to the entire project.

// Mixin for input placeholder styling
@mixin placeholder() {
  ::placeholder {@content}
}

// Mixin for nested input placeholder styling
@mixin placeholder-nested() {
  &::placeholder {@content}
}

// Mixin for mobile safe hover effects
@mixin hover() {
  .no-mobile.no-touch & {
    &:focus,
    &:hover {
      @content;
    }
  }
}

// Mixin for applying mobile specific css
@mixin no-hover() {
  .mobile &,
  .touch & {
    @content;
  }
}

// Hie scrollbars on ios and other webkits
@mixin hide-scrollbars() {
  &::-webkit-scrollbar {
    height: 0;  /* remove scrollbar space */
    width: 0;  /* remove scrollbar space */
    background: transparent;  /* optional: just make scrollbar invisible */
    display: none;
  }

  &::-webkit-scrollbar-track {
    background-color: transparent;
    display: none;
  }

  &::-webkit-scrollbar-thumb {
    background-color: transparent;
    display: none;
  }
}

// Hide Elements Visually without loosing accessibility
// Ref: https://css-tricks.com/places-its-tempting-to-use-display-none-but-dont/
@mixin hide {
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  height: 1px;
  width: 1px;
  margin: -1px !important;
  padding: 0;
  border: 0;
}

// Mixin for pseudo elements
//
// @param {string} $display [inline-block] - How to display the pseudo element
// @param {string} $pos     [absolute]     - Position of the pseudo element
// @param {string} $content [empty]        - Initial content to set
@mixin pseudo($display: inline-block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

// Mixin for hidding body overflow
// Used for modals etc
@mixin hide-body-overflow($class) {
  body.#{$class} {
    height: 100%;
    overflow: hidden;
    margin-right: var(--scrollbar-width); // Prevent jumping as scroolbar toggles
  }
}

// Mixin for progressive enhance transitions
@mixin full-experience($body-class: false) {
  @media (prefers-reduced-motion: no-preference) {
    @supports (--css: variable) and (mask-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 1))) { // limit to css properties
      @if $body-class {
        .no-edge.no-touch #{$body-class} & { // only show on modern non-touch devices
          @content;
        }
      } @else {
        .no-edge.no-touch & { // only show on modern non-touch devices
          @content;
        }
      }
    }
  }
}

// Mixin for elements to fit inside wrapper
@mixin cover-box() {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
}

// Simple truncation mixin to cut off text using an ellipsis after a certain
// width.
//
// .simple-usage {
//   @include truncate();
// }
//
// .detailed-usage {
//   @include truncate(<value>);
// }
@mixin truncate($width: 100%) {
  max-width: $width;
  white-space:nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

// Add a specific ratio to a box
@mixin aspect-ratio($ratio: '16:9') {
  // needs to be wrapped with a before because otherwise it will break on firefox and edge -> flex-box issue
  &:before {
    content: '';
    display: block;
    width: 100%;
    padding-bottom: $ratio;
    height: 0;
  }
}

// Make Full Width Containers in Limited Width Parents
// https://css-tricks.com/full-width-containers-limited-width-parents/
@mixin full-width() {
  width: 100vw;
  position: relative;
  left: 50%;
  right: 50%;
  margin-left: -50vw;
  margin-right: -50vw;
}



// Mixin for defining font colors with variables
@mixin font-color($var-name, $color: false, $define-var: false) {
  @if $color {
    color: $color;
  }

  // define color with vars if possible
  @supports(--css: variable) {
    // define var here instead of in parent somewhere
    @if $define-var == true {
      #{$var-name}: #{$color};
    }
    color: var(#{$var-name});
  }
}

// Mixin for defining background colors with variables
@mixin background-color($var-name, $bgColor: false, $define-var: false) {
  // only overwrite parent settings if needed here
  @if $bgColor {
    background-color: $bgColor;
  }

  // define color with vars if possible
  @supports(--css: variable) {
    // define var here instead of in parent somewhere
    @if $define-var == true {
      #{$var-name}: #{$bgColor};
    }
    background-color: var(#{$var-name});
  }
}

// Mixin for border radius including safari overflow/transform fix
@mixin border-radius($mobile-radius, $desktop-radius: false, $hide-overflow: true) {
  border-radius: $mobile-radius;

  @if $hide-overflow {
    -webkit-mask-image: -webkit-radial-gradient(white, black); // Prevent border-radius glitch on safari https://gist.github.com/ayamflow/b602ab436ac9f05660d9c15190f4fd7b
  }

  @if $desktop-radius {
    @include respond-to(decent) {
      border-radius: $desktop-radius;
    }
  }
}

// Mixin for a clearfix, since flexbox we might not need it anymore
@mixin clearfix() {
  &:after {
    clear: both;
    content: ' ';
    display: table;
  }
}

// Mixin for fluid typography
//
// @param {list} $properties - The properties to apply the calculation e.g. font-size, padding, ...
// @param {number} $min-vw - The min viewport width in pixel
// @param {number} $max-vw - The max viewport width in pixel
// @param {number} $min-value - The min value to apply
// @param {number} $max-value - The max value to apply
@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
  @each $property in $properties {
    #{$property}: $min-value;
  }

  @media screen and (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
    }
  }

  @media screen and (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}

// Nice mixins to have a delay cascade
@mixin transition-delay($delay: 0.1s, $global-delay: 0s, $items: 20, $invert: false) {
  @for $i from 1 through $items {
    @if $invert == false {
      &:nth-child(#{$i}) {
        transition-delay: $i * $delay - $delay + $global-delay;
      }
    } @else {
      &:nth-child(#{$i}) {
        transition-delay: ($items + 1 - $i) * $delay - $delay + $global-delay;
      }
    }
  }
}

// Nice mixins to have a delay cascade
@mixin animation-delay($delay: 0.1s, $global-delay: 0s, $items: 20, $invert: false) {
  @for $i from 0 through $items {
    @if $invert {
      &:nth-child(#{$i}) {
        animation-delay: ($i * $delay + $global-delay) * -1;
      }
    } @else {
      &:nth-child(#{$i}) {
        animation-delay: $i * $delay + $global-delay;
      }
    }
  }
}
